/*
The above program is WRONG. It may produce values 10 20 as output or may produce garbage values or may crash.
The problem is, we return address of a local variable which is not advised as local variables may not exist 
in memory after function call is over.
*/

//It gives the fllowing error
/*
In function 'int* fun()':
6:8: warning: address of local variable 'arr' returned [-Wreturn-local-addr]
    int arr[100];
        ^
*/

//Following are some correct ways of returning array:

/*
1) Using Dynamically Allocated Array :

Dynamically allocated memory (allocated using new or malloc()) remains their until we delete it using delete or free().
So we can create a dynamically allocated array and we can delete it once we come out of function.

*/

#include<iostream>
using namespace std;
 
int *fun()
{
   int *arr = new int[100];
 
   /* Some operations on arr[] */
   arr[0] = 10;
   arr[1] = 20;
    
   return arr;
}
 
int main()
{
    int *ptr = fun();
    cout << ptr[0] << " " << ptr[1];
    return 0;
}

/*
Output :

10 20
*/

/*
2) Using static array:

Lifetime of a static variable is throughout the program. So we can always create a local static array and return it.
*/

#include<iostream>
using namespace std;
 
int *fun()
{
   static int arr[100];
 
   /* Some operations on arr[] */
   arr[0] = 10;
   arr[1] = 20;
    
   return arr;
}
 
int main()
{
    int *ptr = fun();
    cout << ptr[0] << " " << ptr[1];
    return 0;
}

/*
Output :

10 20

*/

/*
3) Using struct:

We can wrap array in a structure/class and return an instance of the struct/class. 
The reason for this work is, array members of structures are deeply copied.
In below program deep copy happens when we returned instance is copied in main.
*/

#include<iostream>
using namespace std;
 
struct arrWrap
{
   int arr[100];
};
 
struct arrWrap fun()
{
   struct arrWrap x;
 
   x.arr[0] = 10;
   x.arr[1] = 20;
    
   return x;
}
 
int main()
{
   struct arrWrap x = fun();
   cout << x.arr[0] << " " << x.arr[1];
   return 0;
}

/*
Output :

10 20

*/
